
namespace FixedFilterBank
{
    struct DFTOutput { float[2049] magnitudes; }

    graph FFB  [[main]]
    {
        input  stream float<2> audioIn;
        output stream float<2> audioOut;
        output dft.dftOut;

        // pan controls for each band
        input value float panBand0 [[name: "Pan 1", min: -1.0, max: 1.0, init: 0.0]];
        input value float panBand1 [[name: "Pan 2", min: -1.0, max: 1.0, init: 0.0]];
        input value float panBand2 [[name: "Pan 3", min: -1.0, max: 1.0, init: 0.0]];
        input value float panBand3 [[name: "Pan 4", min: -1.0, max: 1.0, init: 0.0]];
        input value float panBand4 [[name: "Pan 5", min: -1.0, max: 1.0, init: 0.0]];
        input value float panBand5 [[name: "Pan 6", min: -1.0, max: 1.0, init: 0.0]];
        input value float panBand6 [[name: "Pan 7", min: -1.0, max: 1.0, init: 0.0]];
        input value float panBand7 [[name: "Pan 8", min: -1.0, max: 1.0, init: 0.0]];

        // amp controls for each band
        input value float ampBand0 [[name: "Amp 1", min: 0.0, max: 1.0, init: 1.0]];
        input value float ampBand1 [[name: "Amp 2", min: 0.0, max: 1.0, init: 1.0]];
        input value float ampBand2 [[name: "Amp 3", min: 0.0, max: 1.0, init: 1.0]];
        input value float ampBand3 [[name: "Amp 4", min: 0.0, max: 1.0, init: 1.0]];
        input value float ampBand4 [[name: "Amp 5", min: 0.0, max: 1.0, init: 1.0]];
        input value float ampBand5 [[name: "Amp 6", min: 0.0, max: 1.0, init: 1.0]];
        input value float ampBand6 [[name: "Amp 7", min: 0.0, max: 1.0, init: 1.0]];
        input value float ampBand7 [[name: "Amp 8", min: 0.0, max: 1.0, init: 1.0]];

        // 8 panmixers and filters
        node panners = PanMix[8];

        node
        {
            filter0 = BandpassFilter(61.0f);
            filter1 = BandpassFilter(115.0f);
            filter2 = BandpassFilter(218.0f);
            filter3 = BandpassFilter(411.0f);
            filter4 = BandpassFilter(777.0f);
            filter5 = BandpassFilter(1500.0f);
            filter6 = BandpassFilter(2800.0f);
            filter7 = BandpassFilter(5200.0f);
        }

        // node ampSmoothers = std::smoothing::SmoothedValueStream[8] (0.02f);
        node dft = DFT;

        // connect input controllers
        connection
        {
            panBand0 -> panners[0].pan;
            panBand1 -> panners[1].pan;
            panBand2 -> panners[2].pan;
            panBand3 -> panners[3].pan;
            panBand4 -> panners[4].pan;
            panBand5 -> panners[5].pan;
            panBand6 -> panners[6].pan;
            panBand7 -> panners[7].pan;

            ampBand0 -> panners[0].amp;
            ampBand1 -> panners[1].amp;
            ampBand2 -> panners[2].amp;
            ampBand3 -> panners[3].amp;
            ampBand4 -> panners[4].amp;
            ampBand5 -> panners[5].amp;
            ampBand6 -> panners[6].amp;
            ampBand7 -> panners[7].amp;
        }

        // audio routing
        // TODO: should the filters come before the panmixers?
        connection
        {
            // send audio to filters in parallel
            audioIn -> filter0.in,
                    filter1.in,
                    filter2.in,
                    filter3.in,
                    filter4.in,
                    filter5.in,
                    filter6.in,
                    filter7.in;

            // send each filter output to a panner
            filter0.out -> panners[0].in;
            filter1.out -> panners[1].in;
            filter2.out -> panners[2].in;  
            filter3.out -> panners[3].in;
            filter4.out -> panners[4].in;
            filter5.out -> panners[5].in;
            filter6.out -> panners[6].in;
            filter7.out -> panners[7].in;

            // sum the output of the panners and adjust gain
            (panners[0].out +
            panners[1].out +
            panners[2].out + 
            panners[3].out + 
            panners[4].out + 
            panners[5].out +
            panners[6].out +
            panners[7].out ) -> audioOut, dft.in;
        }
    }

    // 2nd order butterworth bandpass filter
    processor BandpassFilter(float frequency)
    {
        input stream float<2> in;
        output stream float<2> out;

        let Q = 0.71;

        // initialize coefficients
        float A = float(pow(10.0, 1.0 / 40.0));
        float omega = float(2.0 * pi * frequency / processor.frequency);
        float sn = sin(omega);
        float cs = cos(omega);
        float alpha = float(sn * sinh(log(2.0) / 2.0 * Q * omega / sn));

        float a0 = 1 + alpha;
        float a1 = -2 * cs;
        float a2 = 1 - alpha;
        float b0 = alpha;
        float b1 = 0;
        float b2 = -alpha;

        // state variables
        float<2> x1 = 0;
        float<2> x2 = 0;
        float<2> y1 = 0;
        float<2> y2 = 0;

        // process a sample
        float<2> process(float<2> x)
        {
            let result = b0 * x + b1 * x1 + b2 * x2 - a1 * y1 - a2 * y2;
            x2 = x1;
            x1 = x;
            y2 = y1;
            y1 = result;

            return result;
        }

        void main()
        {
            // normalize coefficients
            b0 /= a0;
            b1 /= a0;
            b2 /= a0;
            a1 /= a0;
            a2 /= a0;

            a0 = 1.0;

            loop
            {
                out <- process(in);
                advance();
            }
        }
    }

    processor PanMix 
    {
        input value float pan [[name: "Pan", min: -1.0, max: 1.0, init: 0.0]];
        input value float amp [[name: "Amp", min: 0.0, max: 1.0, init: 1.0]];

        input stream float<2> in;
        output stream float<2> out;

        void main()
        {
            loop
            {
                float<2> gains = std::pan_law::linear (pan);
                out <- float<2> (in[0] * gains[0] * amp, in[1] * gains[1] * amp);
                advance();
            }
        }
    }

    processor DFT
    {
        input stream float<2> in;
        output event DFTOutput dftOut;

        float[4096] buffer;
        wrap<1024> counter = 0;

        float[1024] hann()
        {
            float[1024] window;
            for (int i = 0; i < 1024; i++)
            {
                window[i] = float (0.5 * (1.0 - cos(2.0 * pi * i / (1024 - 1))));
            }
            return window;
        }

        float[1024] window = hann();
        float[2049] magnitudes;
        float normalizationFactor = 2.0f / 2048;

        void main()
        {
            loop
            {
                if (counter == 1023) {
                    float[4096] fft;

                    // zero pad the buffer
                    for (int i = 2048; i < 4096; i++)
                    {
                        buffer[i] = 0.0f;
                    }

                    // perform the FFT
                    std::frequency::realOnlyForwardFFT(buffer, fft);

                    // calculate magnitudes
                    for (int i = 0; i < 2048; i++)
                    {
                        float real = fft[i];
                        float imag = fft[2048 + i];
                        magnitudes[i] = sqrt(real * real + imag * imag) * normalizationFactor * 1000.0f;
                    }

                    DFTOutput result;
                    result.magnitudes = magnitudes;
                    dftOut <- result;
                }

                buffer[counter] = ((in[0] + in[1]) / 2.0f) * window[counter];
                ++counter;

                advance();
            }
        }
    }
}